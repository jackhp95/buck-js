var r=(o=[])=>{let a=(...e)=>console.warn(...e),t=new Map(o);return{clear:()=>t.clear(),delete:e=>{if(t.has(e)){let s=t.get(e);return s.forEach(n=>{let i=t.get(n);i.delete(e),i.size||t.delete(n)}),t.delete(e),s}},remove:e=>s=>{if(t.has(e)){let n=t.get(e);n.delete(s),n.size||t.delete(e)}if(t.has(s)){let n=t.get(s);n.delete(e),n.size||t.delete(s)}},size:()=>t.size,has:e=>{if(t.has(e)){let s=t.get(e);return n=>new Set(s).has(n)}return!1},get:e=>t.has(e)?new Set(t.get(e)):void 0,set:e=>s=>{t.has(e)?t.get(e).add(s):t.set(e,new Set([s])),t.has(s)?t.get(s).add(e):t.set(s,new Set([e]))},nodes:()=>new Set(t.keys()),edges:()=>{let e=[];return t.forEach((s,n)=>s.forEach(i=>e.push([n,i]))),e},tidy:()=>{t.entries().map(([e,s])=>{loop(n=>{t.has(n)?t.get(n).has(e)||a("non-bidirectional | exists in set, not in map: ",e):a("non-bidirectional | exists in map, not in set: ",n)})(s)})}}};export{r as Graph};
//# sourceMappingURL=graph.js.map
